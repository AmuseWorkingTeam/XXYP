package com.xxyp.xxyp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xxyp.xxyp.dao.entity.MessageVoiceEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_VOICE_ENTITY".
*/
public class MessageVoiceEntityDao extends AbstractDao<MessageVoiceEntity, Long> {

    public static final String TABLENAME = "MESSAGE_VOICE_ENTITY";

    /**
     * Properties of entity MessageVoiceEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property VoiceId = new Property(0, Long.class, "voiceId", true, "_id");
        public final static Property VoiceLocalPath = new Property(1, String.class, "voiceLocalPath", false, "VOICE_LOCAL_PATH");
        public final static Property VoiceUrl = new Property(2, String.class, "voiceUrl", false, "VOICE_URL");
        public final static Property VoiceLen = new Property(3, Integer.class, "voiceLen", false, "VOICE_LEN");
        public final static Property BelongTo = new Property(4, String.class, "belongTo", false, "BELONG_TO");
        public final static Property LastModifyTime = new Property(5, Long.class, "lastModifyTime", false, "LAST_MODIFY_TIME");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
    }


    public MessageVoiceEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageVoiceEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_VOICE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: voiceId
                "\"VOICE_LOCAL_PATH\" TEXT," + // 1: voiceLocalPath
                "\"VOICE_URL\" TEXT," + // 2: voiceUrl
                "\"VOICE_LEN\" INTEGER," + // 3: voiceLen
                "\"BELONG_TO\" TEXT NOT NULL ," + // 4: belongTo
                "\"LAST_MODIFY_TIME\" INTEGER," + // 5: lastModifyTime
                "\"STATUS\" INTEGER);"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_VOICE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageVoiceEntity entity) {
        stmt.clearBindings();
 
        Long voiceId = entity.getVoiceId();
        if (voiceId != null) {
            stmt.bindLong(1, voiceId);
        }
 
        String voiceLocalPath = entity.getVoiceLocalPath();
        if (voiceLocalPath != null) {
            stmt.bindString(2, voiceLocalPath);
        }
 
        String voiceUrl = entity.getVoiceUrl();
        if (voiceUrl != null) {
            stmt.bindString(3, voiceUrl);
        }
 
        Integer voiceLen = entity.getVoiceLen();
        if (voiceLen != null) {
            stmt.bindLong(4, voiceLen);
        }
        stmt.bindString(5, entity.getBelongTo());
 
        Long lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindLong(6, lastModifyTime);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageVoiceEntity entity) {
        stmt.clearBindings();
 
        Long voiceId = entity.getVoiceId();
        if (voiceId != null) {
            stmt.bindLong(1, voiceId);
        }
 
        String voiceLocalPath = entity.getVoiceLocalPath();
        if (voiceLocalPath != null) {
            stmt.bindString(2, voiceLocalPath);
        }
 
        String voiceUrl = entity.getVoiceUrl();
        if (voiceUrl != null) {
            stmt.bindString(3, voiceUrl);
        }
 
        Integer voiceLen = entity.getVoiceLen();
        if (voiceLen != null) {
            stmt.bindLong(4, voiceLen);
        }
        stmt.bindString(5, entity.getBelongTo());
 
        Long lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindLong(6, lastModifyTime);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageVoiceEntity readEntity(Cursor cursor, int offset) {
        MessageVoiceEntity entity = new MessageVoiceEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // voiceId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // voiceLocalPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // voiceUrl
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // voiceLen
            cursor.getString(offset + 4), // belongTo
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // lastModifyTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageVoiceEntity entity, int offset) {
        entity.setVoiceId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVoiceLocalPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVoiceUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVoiceLen(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBelongTo(cursor.getString(offset + 4));
        entity.setLastModifyTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageVoiceEntity entity, long rowId) {
        entity.setVoiceId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageVoiceEntity entity) {
        if(entity != null) {
            return entity.getVoiceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageVoiceEntity entity) {
        return entity.getVoiceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
