package com.xxyp.xxyp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xxyp.xxyp.dao.entity.MessageImageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_IMAGE_ENTITY".
*/
public class MessageImageEntityDao extends AbstractDao<MessageImageEntity, Long> {

    public static final String TABLENAME = "MESSAGE_IMAGE_ENTITY";

    /**
     * Properties of entity MessageImageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImgId = new Property(0, Long.class, "imgId", true, "_id");
        public final static Property BelongTo = new Property(1, String.class, "belongTo", false, "BELONG_TO");
        public final static Property LocalImagePath = new Property(2, String.class, "localImagePath", false, "LOCAL_IMAGE_PATH");
        public final static Property BigImagePath = new Property(3, String.class, "bigImagePath", false, "BIG_IMAGE_PATH");
        public final static Property ImageUrl = new Property(4, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ThumbImageUrl = new Property(5, String.class, "thumbImageUrl", false, "THUMB_IMAGE_URL");
        public final static Property Format = new Property(6, String.class, "format", false, "FORMAT");
        public final static Property ImageHeight = new Property(7, Integer.class, "imageHeight", false, "IMAGE_HEIGHT");
        public final static Property ImageWidth = new Property(8, Integer.class, "imageWidth", false, "IMAGE_WIDTH");
        public final static Property Digest = new Property(9, String.class, "digest", false, "DIGEST");
        public final static Property LastModifyTime = new Property(10, Long.class, "lastModifyTime", false, "LAST_MODIFY_TIME");
        public final static Property Status = new Property(11, Integer.class, "status", false, "STATUS");
    }


    public MessageImageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageImageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_IMAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: imgId
                "\"BELONG_TO\" TEXT NOT NULL ," + // 1: belongTo
                "\"LOCAL_IMAGE_PATH\" TEXT," + // 2: localImagePath
                "\"BIG_IMAGE_PATH\" TEXT," + // 3: bigImagePath
                "\"IMAGE_URL\" TEXT," + // 4: imageUrl
                "\"THUMB_IMAGE_URL\" TEXT," + // 5: thumbImageUrl
                "\"FORMAT\" TEXT," + // 6: format
                "\"IMAGE_HEIGHT\" INTEGER," + // 7: imageHeight
                "\"IMAGE_WIDTH\" INTEGER," + // 8: imageWidth
                "\"DIGEST\" TEXT," + // 9: digest
                "\"LAST_MODIFY_TIME\" INTEGER," + // 10: lastModifyTime
                "\"STATUS\" INTEGER);"); // 11: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_IMAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageImageEntity entity) {
        stmt.clearBindings();
 
        Long imgId = entity.getImgId();
        if (imgId != null) {
            stmt.bindLong(1, imgId);
        }
        stmt.bindString(2, entity.getBelongTo());
 
        String localImagePath = entity.getLocalImagePath();
        if (localImagePath != null) {
            stmt.bindString(3, localImagePath);
        }
 
        String bigImagePath = entity.getBigImagePath();
        if (bigImagePath != null) {
            stmt.bindString(4, bigImagePath);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
 
        String thumbImageUrl = entity.getThumbImageUrl();
        if (thumbImageUrl != null) {
            stmt.bindString(6, thumbImageUrl);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(7, format);
        }
 
        Integer imageHeight = entity.getImageHeight();
        if (imageHeight != null) {
            stmt.bindLong(8, imageHeight);
        }
 
        Integer imageWidth = entity.getImageWidth();
        if (imageWidth != null) {
            stmt.bindLong(9, imageWidth);
        }
 
        String digest = entity.getDigest();
        if (digest != null) {
            stmt.bindString(10, digest);
        }
 
        Long lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindLong(11, lastModifyTime);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(12, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageImageEntity entity) {
        stmt.clearBindings();
 
        Long imgId = entity.getImgId();
        if (imgId != null) {
            stmt.bindLong(1, imgId);
        }
        stmt.bindString(2, entity.getBelongTo());
 
        String localImagePath = entity.getLocalImagePath();
        if (localImagePath != null) {
            stmt.bindString(3, localImagePath);
        }
 
        String bigImagePath = entity.getBigImagePath();
        if (bigImagePath != null) {
            stmt.bindString(4, bigImagePath);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
 
        String thumbImageUrl = entity.getThumbImageUrl();
        if (thumbImageUrl != null) {
            stmt.bindString(6, thumbImageUrl);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(7, format);
        }
 
        Integer imageHeight = entity.getImageHeight();
        if (imageHeight != null) {
            stmt.bindLong(8, imageHeight);
        }
 
        Integer imageWidth = entity.getImageWidth();
        if (imageWidth != null) {
            stmt.bindLong(9, imageWidth);
        }
 
        String digest = entity.getDigest();
        if (digest != null) {
            stmt.bindString(10, digest);
        }
 
        Long lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindLong(11, lastModifyTime);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(12, status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageImageEntity readEntity(Cursor cursor, int offset) {
        MessageImageEntity entity = new MessageImageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // imgId
            cursor.getString(offset + 1), // belongTo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // localImagePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bigImagePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbImageUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // format
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // imageHeight
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // imageWidth
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // digest
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // lastModifyTime
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageImageEntity entity, int offset) {
        entity.setImgId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBelongTo(cursor.getString(offset + 1));
        entity.setLocalImagePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBigImagePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThumbImageUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFormat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImageHeight(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setImageWidth(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDigest(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLastModifyTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageImageEntity entity, long rowId) {
        entity.setImgId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageImageEntity entity) {
        if(entity != null) {
            return entity.getImgId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageImageEntity entity) {
        return entity.getImgId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
