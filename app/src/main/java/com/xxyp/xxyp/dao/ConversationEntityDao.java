package com.xxyp.xxyp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xxyp.xxyp.dao.entity.ConversationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION_ENTITY".
*/
public class ConversationEntityDao extends AbstractDao<ConversationEntity, Long> {

    public static final String TABLENAME = "CONVERSATION_ENTITY";

    /**
     * Properties of entity ConversationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChatId = new Property(1, String.class, "chatId", false, "CHAT_ID");
        public final static Property ChatType = new Property(2, Integer.class, "chatType", false, "CHAT_TYPE");
        public final static Property ConversationAvatar = new Property(3, String.class, "conversationAvatar", false, "CONVERSATION_AVATAR");
        public final static Property ConversationName = new Property(4, String.class, "conversationName", false, "CONVERSATION_NAME");
        public final static Property MsgDigest = new Property(5, String.class, "msgDigest", false, "MSG_DIGEST");
        public final static Property CreateTime = new Property(6, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UnReadCount = new Property(7, Integer.class, "unReadCount", false, "UN_READ_COUNT");
        public final static Property ConversationId = new Property(8, String.class, "conversationId", false, "CONVERSATION_ID");
    }


    public ConversationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CHAT_ID\" TEXT NOT NULL UNIQUE ," + // 1: chatId
                "\"CHAT_TYPE\" INTEGER NOT NULL ," + // 2: chatType
                "\"CONVERSATION_AVATAR\" TEXT," + // 3: conversationAvatar
                "\"CONVERSATION_NAME\" TEXT," + // 4: conversationName
                "\"MSG_DIGEST\" TEXT," + // 5: msgDigest
                "\"CREATE_TIME\" INTEGER," + // 6: createTime
                "\"UN_READ_COUNT\" INTEGER," + // 7: unReadCount
                "\"CONVERSATION_ID\" TEXT);"); // 8: conversationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConversationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getChatId());
        stmt.bindLong(3, entity.getChatType());
 
        String conversationAvatar = entity.getConversationAvatar();
        if (conversationAvatar != null) {
            stmt.bindString(4, conversationAvatar);
        }
 
        String conversationName = entity.getConversationName();
        if (conversationName != null) {
            stmt.bindString(5, conversationName);
        }
 
        String msgDigest = entity.getMsgDigest();
        if (msgDigest != null) {
            stmt.bindString(6, msgDigest);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime);
        }
 
        Integer unReadCount = entity.getUnReadCount();
        if (unReadCount != null) {
            stmt.bindLong(8, unReadCount);
        }
 
        String conversationId = entity.getConversationId();
        if (conversationId != null) {
            stmt.bindString(9, conversationId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConversationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getChatId());
        stmt.bindLong(3, entity.getChatType());
 
        String conversationAvatar = entity.getConversationAvatar();
        if (conversationAvatar != null) {
            stmt.bindString(4, conversationAvatar);
        }
 
        String conversationName = entity.getConversationName();
        if (conversationName != null) {
            stmt.bindString(5, conversationName);
        }
 
        String msgDigest = entity.getMsgDigest();
        if (msgDigest != null) {
            stmt.bindString(6, msgDigest);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime);
        }
 
        Integer unReadCount = entity.getUnReadCount();
        if (unReadCount != null) {
            stmt.bindLong(8, unReadCount);
        }
 
        String conversationId = entity.getConversationId();
        if (conversationId != null) {
            stmt.bindString(9, conversationId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConversationEntity readEntity(Cursor cursor, int offset) {
        ConversationEntity entity = new ConversationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // chatId
            cursor.getInt(offset + 2), // chatType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // conversationAvatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // conversationName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // msgDigest
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // createTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // unReadCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // conversationId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConversationEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChatId(cursor.getString(offset + 1));
        entity.setChatType(cursor.getInt(offset + 2));
        entity.setConversationAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setConversationName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsgDigest(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUnReadCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setConversationId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConversationEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConversationEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConversationEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
