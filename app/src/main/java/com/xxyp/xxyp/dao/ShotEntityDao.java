package com.xxyp.xxyp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xxyp.xxyp.dao.entity.ShotEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOT_ENTITY".
*/
public class ShotEntityDao extends AbstractDao<ShotEntity, Long> {

    public static final String TABLENAME = "SHOT_ENTITY";

    /**
     * Properties of entity ShotEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property DatingShotId = new Property(1, String.class, "datingShotId", false, "DATING_SHOT_ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property DatingShotAddress = new Property(3, String.class, "datingShotAddress", false, "DATING_SHOT_ADDRESS");
        public final static Property Purpose = new Property(4, String.class, "purpose", false, "PURPOSE");
        public final static Property PaymentMethod = new Property(5, String.class, "paymentMethod", false, "PAYMENT_METHOD");
        public final static Property DatingShotIntroduction = new Property(6, String.class, "datingShotIntroduction", false, "DATING_SHOT_INTRODUCTION");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property DatingUserId = new Property(8, String.class, "datingUserId", false, "DATING_USER_ID");
        public final static Property DatingShotImages = new Property(9, String.class, "datingShotImages", false, "DATING_SHOT_IMAGES");
        public final static Property ReleaseTime = new Property(10, long.class, "releaseTime", false, "RELEASE_TIME");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
    }


    public ShotEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ShotEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"DATING_SHOT_ID\" TEXT," + // 1: datingShotId
                "\"USER_ID\" TEXT," + // 2: userId
                "\"DATING_SHOT_ADDRESS\" TEXT," + // 3: datingShotAddress
                "\"PURPOSE\" TEXT," + // 4: purpose
                "\"PAYMENT_METHOD\" TEXT," + // 5: paymentMethod
                "\"DATING_SHOT_INTRODUCTION\" TEXT," + // 6: datingShotIntroduction
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"DATING_USER_ID\" TEXT," + // 8: datingUserId
                "\"DATING_SHOT_IMAGES\" TEXT," + // 9: datingShotImages
                "\"RELEASE_TIME\" INTEGER NOT NULL ," + // 10: releaseTime
                "\"STATUS\" INTEGER NOT NULL );"); // 11: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShotEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String datingShotId = entity.getDatingShotId();
        if (datingShotId != null) {
            stmt.bindString(2, datingShotId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String datingShotAddress = entity.getDatingShotAddress();
        if (datingShotAddress != null) {
            stmt.bindString(4, datingShotAddress);
        }
 
        String purpose = entity.getPurpose();
        if (purpose != null) {
            stmt.bindString(5, purpose);
        }
 
        String paymentMethod = entity.getPaymentMethod();
        if (paymentMethod != null) {
            stmt.bindString(6, paymentMethod);
        }
 
        String datingShotIntroduction = entity.getDatingShotIntroduction();
        if (datingShotIntroduction != null) {
            stmt.bindString(7, datingShotIntroduction);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String datingUserId = entity.getDatingUserId();
        if (datingUserId != null) {
            stmt.bindString(9, datingUserId);
        }
 
        String datingShotImages = entity.getDatingShotImages();
        if (datingShotImages != null) {
            stmt.bindString(10, datingShotImages);
        }
        stmt.bindLong(11, entity.getReleaseTime());
        stmt.bindLong(12, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShotEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String datingShotId = entity.getDatingShotId();
        if (datingShotId != null) {
            stmt.bindString(2, datingShotId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String datingShotAddress = entity.getDatingShotAddress();
        if (datingShotAddress != null) {
            stmt.bindString(4, datingShotAddress);
        }
 
        String purpose = entity.getPurpose();
        if (purpose != null) {
            stmt.bindString(5, purpose);
        }
 
        String paymentMethod = entity.getPaymentMethod();
        if (paymentMethod != null) {
            stmt.bindString(6, paymentMethod);
        }
 
        String datingShotIntroduction = entity.getDatingShotIntroduction();
        if (datingShotIntroduction != null) {
            stmt.bindString(7, datingShotIntroduction);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String datingUserId = entity.getDatingUserId();
        if (datingUserId != null) {
            stmt.bindString(9, datingUserId);
        }
 
        String datingShotImages = entity.getDatingShotImages();
        if (datingShotImages != null) {
            stmt.bindString(10, datingShotImages);
        }
        stmt.bindLong(11, entity.getReleaseTime());
        stmt.bindLong(12, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ShotEntity readEntity(Cursor cursor, int offset) {
        ShotEntity entity = new ShotEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // datingShotId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // datingShotAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // purpose
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // paymentMethod
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // datingShotIntroduction
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // datingUserId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // datingShotImages
            cursor.getLong(offset + 10), // releaseTime
            cursor.getInt(offset + 11) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShotEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDatingShotId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDatingShotAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPurpose(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPaymentMethod(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDatingShotIntroduction(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDatingUserId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDatingShotImages(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReleaseTime(cursor.getLong(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShotEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShotEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShotEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
